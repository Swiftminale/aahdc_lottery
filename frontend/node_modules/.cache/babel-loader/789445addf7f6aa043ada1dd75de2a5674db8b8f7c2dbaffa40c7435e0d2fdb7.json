{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_BASE_URL || \"\";\nconst API_URL = `${API_BASE}/api/candidates`;\nconst authHeader = () => {\n  const token = localStorage.getItem(\"token\");\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Import candidates in batch via file upload (Excel/CSV)\nexport async function importCandidates(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await fetch(`${API_BASE}/api/candidates/import`, {\n    method: \"POST\",\n    body: formData,\n    headers: {\n      ...authHeader()\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to import candidates\");\n  }\n  return response.json();\n}\n\n// Batch add candidates\nexport const addCandidatesBatch = async candidates => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...authHeader()\n    },\n    body: JSON.stringify(candidates)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidates batch\");\n  }\n  return await response.json();\n};\nexport const addCandidate = async candidate => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...authHeader()\n    },\n    body: JSON.stringify(candidate)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidate\");\n  }\n  return await response.json();\n};\nexport const getCandidates = async () => {\n  const response = await fetch(API_URL, {\n    headers: {\n      ...authHeader()\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch candidates\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_BASE_URL","API_URL","authHeader","token","localStorage","getItem","Authorization","importCandidates","file","formData","FormData","append","response","fetch","method","body","headers","ok","Error","json","addCandidatesBatch","candidates","JSON","stringify","errorData","message","addCandidate","candidate","getCandidates"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/services/candidateService.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_BASE_URL || \"\";\nconst API_URL = `${API_BASE}/api/candidates`;\n\nconst authHeader = () => {\n  const token = localStorage.getItem(\"token\");\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};\n\n// Import candidates in batch via file upload (Excel/CSV)\nexport async function importCandidates(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await fetch(`${API_BASE}/api/candidates/import`, {\n    method: \"POST\",\n    body: formData,\n    headers: { ...authHeader() },\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to import candidates\");\n  }\n  return response.json();\n}\n\n// Batch add candidates\nexport const addCandidatesBatch = async (candidates) => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n    body: JSON.stringify(candidates),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidates batch\");\n  }\n  return await response.json();\n};\n\nexport const addCandidate = async (candidate) => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", ...authHeader() },\n    body: JSON.stringify(candidate),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidate\");\n  }\n  return await response.json();\n};\n\nexport const getCandidates = async () => {\n  const response = await fetch(API_URL, { headers: { ...authHeader() } });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch candidates\");\n  }\n  return await response.json();\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,EAAE;AACzD,MAAMC,OAAO,GAAG,GAAGJ,QAAQ,iBAAiB;AAE5C,MAAMK,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,eAAeI,gBAAgBA,CAACC,IAAI,EAAE;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,QAAQ,wBAAwB,EAAE;IAChEiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN,QAAQ;IACdO,OAAO,EAAE;MAAE,GAAGd,UAAU,CAAC;IAAE;EAC7B,CAAC,CAAC;EACF,IAAI,CAACU,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,UAAU,IAAK;EACtD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACZ,OAAO,EAAE;IACpCa,MAAM,EAAE,MAAM;IACdE,OAAO,EAAE;MAAE,cAAc,EAAE,kBAAkB;MAAE,GAAGd,UAAU,CAAC;IAAE,CAAC;IAChEa,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACF,UAAU;EACjC,CAAC,CAAC;EACF,IAAI,CAACT,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAMO,SAAS,GAAG,MAAMZ,QAAQ,CAACO,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACM,SAAS,CAACC,OAAO,IAAI,gCAAgC,CAAC;EACxE;EACA,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAACZ,OAAO,EAAE;IACpCa,MAAM,EAAE,MAAM;IACdE,OAAO,EAAE;MAAE,cAAc,EAAE,kBAAkB;MAAE,GAAGd,UAAU,CAAC;IAAE,CAAC;IAChEa,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACI,SAAS;EAChC,CAAC,CAAC;EACF,IAAI,CAACf,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAMO,SAAS,GAAG,MAAMZ,QAAQ,CAACO,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACM,SAAS,CAACC,OAAO,IAAI,yBAAyB,CAAC;EACjE;EACA,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAACZ,OAAO,EAAE;IAAEe,OAAO,EAAE;MAAE,GAAGd,UAAU,CAAC;IAAE;EAAE,CAAC,CAAC;EACvE,IAAI,CAACU,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}