{"ast":null,"code":"const API_BASE_URL = \"http://localhost:5000/api/allocation\"; // Adjust if deployed\n\nexport async function runAllocation(distributionMethod = \"Full Lottery\") {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        distributionMethod\n      }) // ✅ Always send this\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Allocation request failed (${response.status}): ${JSON.stringify(errorData)}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error;\n  }\n}\nexport async function getAllocatedUnits() {\n  const res = await fetch(`${API_BASE_URL}/allocated`);\n  return res.json();\n}\nexport async function getUnallocatedUnits() {\n  const res = await fetch(`${API_BASE_URL}/unallocated`);\n  return res.json();\n}","map":{"version":3,"names":["API_BASE_URL","runAllocation","distributionMethod","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","status","error","console","getAllocatedUnits","res","getUnallocatedUnits"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/services/allocationService.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:5000/api/allocation\"; // Adjust if deployed\n\nexport async function runAllocation(distributionMethod = \"Full Lottery\") {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ distributionMethod }), // ✅ Always send this\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(\n        `Allocation request failed (${response.status}): ${JSON.stringify(\n          errorData\n        )}`\n      );\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error;\n  }\n}\n\nexport async function getAllocatedUnits() {\n  const res = await fetch(`${API_BASE_URL}/allocated`);\n  return res.json();\n}\n\nexport async function getUnallocatedUnits() {\n  const res = await fetch(`${API_BASE_URL}/unallocated`);\n  return res.json();\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,sCAAsC,CAAC,CAAC;;AAE7D,OAAO,eAAeC,aAAaA,CAACC,kBAAkB,GAAG,cAAc,EAAE;EACvE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,MAAM,EAAE;MAClDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAmB,CAAC,CAAC,CAAE;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CACb,8BAA8BV,QAAQ,CAACW,MAAM,MAAMN,IAAI,CAACC,SAAS,CAC/DE,SACF,CAAC,EACH,CAAC;IACH;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeE,iBAAiBA,CAAA,EAAG;EACxC,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAAC,GAAGJ,YAAY,YAAY,CAAC;EACpD,OAAOkB,GAAG,CAACN,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeO,mBAAmBA,CAAA,EAAG;EAC1C,MAAMD,GAAG,GAAG,MAAMd,KAAK,CAAC,GAAGJ,YAAY,cAAc,CAAC;EACtD,OAAOkB,GAAG,CAACN,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}