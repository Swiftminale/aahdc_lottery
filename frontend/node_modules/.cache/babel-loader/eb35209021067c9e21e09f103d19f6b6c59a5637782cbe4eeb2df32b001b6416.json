{"ast":null,"code":"// frontend/src/services/allocationService.js\nconst API_BASE_URL = \"http://localhost:5000/api/allocation\";\nexport async function runAllocation() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // If the server responds with HTML (like an error page), avoid JSON parse crash\n    const contentType = response.headers.get(\"content-type\");\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Allocation request failed (${response.status}): ${contentType !== null && contentType !== void 0 && contentType.includes(\"application/json\") ? JSON.stringify(JSON.parse(errorText)) : errorText}`);\n    }\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Unexpected response format — expected JSON\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error; // Let the UI handle displaying the error\n  }\n}\nexport async function getAllocatedUnits() {\n  const response = await fetch(`${API_BASE_URL}/allocated`);\n  return response.json();\n}\nexport async function getUnallocatedUnits() {\n  const response = await fetch(`${API_BASE_URL}/unallocated`);\n  return response.json();\n}","map":{"version":3,"names":["API_BASE_URL","runAllocation","response","fetch","method","headers","contentType","get","ok","errorText","text","Error","status","includes","JSON","stringify","parse","json","error","console","getAllocatedUnits","getUnallocatedUnits"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/services/allocationService.js"],"sourcesContent":["// frontend/src/services/allocationService.js\nconst API_BASE_URL = \"http://localhost:5000/api/allocation\";\n\nexport async function runAllocation() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    // If the server responds with HTML (like an error page), avoid JSON parse crash\n    const contentType = response.headers.get(\"content-type\");\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Allocation request failed (${response.status}): ${\n          contentType?.includes(\"application/json\")\n            ? JSON.stringify(JSON.parse(errorText))\n            : errorText\n        }`\n      );\n    }\n\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Unexpected response format — expected JSON\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error; // Let the UI handle displaying the error\n  }\n}\n\nexport async function getAllocatedUnits() {\n  const response = await fetch(`${API_BASE_URL}/allocated`);\n  return response.json();\n}\n\nexport async function getUnallocatedUnits() {\n  const response = await fetch(`${API_BASE_URL}/unallocated`);\n  return response.json();\n}\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,sCAAsC;AAE3D,OAAO,eAAeC,aAAaA,CAAA,EAAG;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,MAAM,EAAE;MAClDI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGJ,QAAQ,CAACG,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC;IACxD,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CACb,8BAA8BT,QAAQ,CAACU,MAAM,MAC3CN,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEO,QAAQ,CAAC,kBAAkB,CAAC,GACrCC,IAAI,CAACC,SAAS,CAACD,IAAI,CAACE,KAAK,CAACP,SAAS,CAAC,CAAC,GACrCA,SAAS,EAEjB,CAAC;IACH;IAEA,IAAI,CAACH,WAAW,IAAI,CAACA,WAAW,CAACO,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC7D,MAAM,IAAIF,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IAEA,OAAO,MAAMT,QAAQ,CAACe,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;AAEA,OAAO,eAAeE,iBAAiBA,CAAA,EAAG;EACxC,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,CAAC;EACzD,OAAOE,QAAQ,CAACe,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeI,mBAAmBA,CAAA,EAAG;EAC1C,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,cAAc,CAAC;EAC3D,OAAOE,QAAQ,CAACe,IAAI,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}