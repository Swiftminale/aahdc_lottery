{"ast":null,"code":"const API_URL = \"http://localhost:5000/api/candidates\";\n\n// Import candidates in batch via file upload (Excel/CSV)\nexport async function importCandidates(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await fetch(\"http://localhost:5000/api/candidates/import\", {\n    method: \"POST\",\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to import candidates\");\n  }\n  return response.json();\n}\n\n// Batch add candidates\nexport const addCandidatesBatch = async candidates => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(candidates)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidates batch\");\n  }\n  return await response.json();\n};\nexport const addCandidate = async candidate => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(candidate)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidate\");\n  }\n  return await response.json();\n};\nexport const getCandidates = async () => {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch candidates\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_URL","importCandidates","file","formData","FormData","append","response","fetch","method","body","ok","Error","json","addCandidatesBatch","candidates","headers","JSON","stringify","errorData","message","addCandidate","candidate","getCandidates"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/services/candidateService.js"],"sourcesContent":["const API_URL = \"http://localhost:5000/api/candidates\";\n\n// Import candidates in batch via file upload (Excel/CSV)\nexport async function importCandidates(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await fetch(\"http://localhost:5000/api/candidates/import\", {\n    method: \"POST\",\n    body: formData,\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to import candidates\");\n  }\n  return response.json();\n}\n\n// Batch add candidates\nexport const addCandidatesBatch = async (candidates) => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(candidates),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidates batch\");\n  }\n  return await response.json();\n};\n\nexport const addCandidate = async (candidate) => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(candidate),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || \"Failed to add candidate\");\n  }\n  return await response.json();\n};\n\nexport const getCandidates = async () => {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch candidates\");\n  }\n  return await response.json();\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,sCAAsC;;AAEtD;AACA,OAAO,eAAeC,gBAAgBA,CAACC,IAAI,EAAE;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;IAC1EC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EACF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,UAAU,IAAK;EACtD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,EAAE;IACpCQ,MAAM,EAAE,MAAM;IACdO,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CN,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACH,UAAU;EACjC,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMQ,SAAS,GAAG,MAAMZ,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACO,SAAS,CAACC,OAAO,IAAI,gCAAgC,CAAC;EACxE;EACA,OAAO,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,EAAE;IACpCQ,MAAM,EAAE,MAAM;IACdO,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CN,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACI,SAAS;EAChC,CAAC,CAAC;EACF,IAAI,CAACf,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMQ,SAAS,GAAG,MAAMZ,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACO,SAAS,CAACC,OAAO,IAAI,yBAAyB,CAAC;EACjE;EACA,OAAO,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,CAAC;EACrC,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}