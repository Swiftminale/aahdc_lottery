{"ast":null,"code":"// frontend/src/services/allocationService.js\nconst API_URL = \"http://localhost:5000/api/allocation\"; // Ensure this matches your backend port\n\nexport const runAllocation = async method => {\n  try {\n    const response = await fetch(`${API_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        distributionMethod: method\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to run allocation\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error;\n  }\n};\nexport const getAllocatedUnits = async () => {\n  try {\n    const response = await fetch(`${API_URL}/allocated`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch allocated units\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching allocated units:\", error);\n    throw error;\n  }\n};\nexport const getUnallocatedUnits = async () => {\n  try {\n    const response = await fetch(`${API_URL}/unallocated`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch unallocated units\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching unallocated units:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","runAllocation","method","response","fetch","headers","body","JSON","stringify","distributionMethod","ok","errorData","json","Error","message","error","console","getAllocatedUnits","getUnallocatedUnits"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/services/allocationService.js"],"sourcesContent":["// frontend/src/services/allocationService.js\nconst API_URL = \"http://localhost:5000/api/allocation\"; // Ensure this matches your backend port\n\nexport const runAllocation = async (method) => {\n  try {\n    const response = await fetch(`${API_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ distributionMethod: method }),\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to run allocation\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error running allocation:\", error);\n    throw error;\n  }\n};\n\nexport const getAllocatedUnits = async () => {\n  try {\n    const response = await fetch(`${API_URL}/allocated`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch allocated units\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching allocated units:\", error);\n    throw error;\n  }\n};\n\nexport const getUnallocatedUnits = async () => {\n  try {\n    const response = await fetch(`${API_URL}/unallocated`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch unallocated units\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching unallocated units:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,sCAAsC,CAAC,CAAC;;AAExD,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,MAAM,EAAE;MAC7CE,MAAM,EAAE,MAAM;MACdG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,kBAAkB,EAAEP;MAAO,CAAC;IACrD,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,0BAA0B,CAAC;IAClE;IACA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,YAAY,CAAC;IACpD,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IACpD;IACA,OAAO,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,cAAc,CAAC;IACtD,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIG,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA,OAAO,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}