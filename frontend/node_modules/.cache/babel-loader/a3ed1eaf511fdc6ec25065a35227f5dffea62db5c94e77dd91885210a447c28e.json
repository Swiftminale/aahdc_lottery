{"ast":null,"code":"var _jsxFileName = \"/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/components/DeveloperSubmissionForm.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/DeveloperSubmissionForm.js\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { submitUnits } from \"../services/unitService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst unitTypologies = [\"Studio\", \"1BR\", \"2BR\", \"3BR\", \"Shop\"];\nfunction DeveloperSubmissionForm() {\n  _s();\n  const [units, setUnits] = useState([{\n    unitId: \"\",\n    typology: \"\",\n    netArea: \"\",\n    grossArea: \"\",\n    floorNumber: \"\",\n    blockName: \"\",\n    totalBuildingGrossArea: \"\"\n  }]);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleExcelUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const data = evt.target.result;\n      const workbook = XLSX.read(data, {\n        type: \"binary\"\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n        defval: \"\"\n      });\n      const parsedUnits = jsonData.map(row => ({\n        unitId: row[\"Unit ID\"] || \"\",\n        typology: row[\"Typology\"] || \"\",\n        netArea: row[\"Net Area\"] || \"\",\n        grossArea: row[\"Gross Area\"] || \"\",\n        floorNumber: row[\"Floor Number\"] || \"\",\n        blockName: row[\"Block Name\"] || \"\",\n        totalBuildingGrossArea: row[\"Total Building Gross Area\"] || \"\"\n      }));\n      setUnits(parsedUnits);\n      setMessage(`Loaded ${parsedUnits.length} units from Excel file.`);\n      setError(\"\");\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleUnitChange = (index, event) => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newUnits = [...units];\n    newUnits[index][name] = value;\n\n    // Auto-fill totalBuildingGrossArea if it's the first unit in a new block\n    if (name === \"blockName\" && value && !newUnits[index].totalBuildingGrossArea) {\n      const existingBlockUnits = newUnits.filter((u, i) => i !== index && u.blockName === value);\n      if (existingBlockUnits.length > 0) {\n        newUnits[index].totalBuildingGrossArea = existingBlockUnits[0].totalBuildingGrossArea;\n      }\n    }\n    setUnits(newUnits);\n  };\n  const addUnit = () => {\n    const lastUnit = units[units.length - 1];\n    const newUnit = {\n      unitId: \"\",\n      typology: \"\",\n      netArea: \"\",\n      grossArea: \"\",\n      floorNumber: \"\",\n      blockName: lastUnit ? lastUnit.blockName : \"\",\n      totalBuildingGrossArea: lastUnit ? lastUnit.totalBuildingGrossArea : \"\"\n    };\n    setUnits([...units, newUnit]);\n  };\n  const removeUnit = index => {\n    const newUnits = units.filter((_, i) => i !== index);\n    setUnits(newUnits);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setMessage(\"\");\n    setError(\"\");\n    setLoading(true);\n    try {\n      // Basic client-side validation for empty fields\n      for (const unit of units) {\n        for (const key in unit) {\n          if (!unit[key]) {\n            setError(`Please fill all fields for Unit ID: ${unit.unitId || \"New Unit\"}.`);\n            setLoading(false);\n            return;\n          }\n        }\n      }\n\n      // Convert area and floor numbers to numbers, and ensure allocated: false\n      const unitsToSend = units.map(unit => ({\n        ...unit,\n        netArea: parseFloat(unit.netArea),\n        grossArea: parseFloat(unit.grossArea),\n        floorNumber: parseInt(unit.floorNumber, 10),\n        totalBuildingGrossArea: parseFloat(unit.totalBuildingGrossArea),\n        allocated: false\n      }));\n      const response = await submitUnits(unitsToSend);\n      setMessage(response.message);\n      setError(\"\");\n      setUnits([{\n        unitId: \"\",\n        typology: \"\",\n        netArea: \"\",\n        grossArea: \"\",\n        floorNumber: \"\",\n        blockName: \"\",\n        totalBuildingGrossArea: \"\"\n      }]); // Clear form\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Developer Unit Submission\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message-success\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Submitting units...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Upload Excel File (Batch Upload):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xlsx, .xls\",\n          onChange: handleExcelUpload,\n          disabled: loading,\n          style: {\n            display: \"block\",\n            marginTop: \"8px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [units.map((unit, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: \"1px solid #e0e0e0\",\n          padding: \"20px\",\n          marginBottom: \"20px\",\n          borderRadius: \"10px\",\n          backgroundColor: \"#fdfdfd\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            marginTop: 0,\n            marginBottom: \"15px\",\n            color: \"#34495e\"\n          },\n          children: [\"Unit \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n            gap: \"15px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Unit ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"unitId\",\n              value: unit.unitId,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Typology:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"typology\",\n              value: unit.typology,\n              onChange: e => handleUnitChange(index, e),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Typology\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this), unitTypologies.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: type,\n                children: type\n              }, type, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Net Area (sqm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              name: \"netArea\",\n              value: unit.netArea,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Gross Area (sqm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              name: \"grossArea\",\n              value: unit.grossArea,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Floor Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"floorNumber\",\n              value: unit.floorNumber,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Block/Building Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"blockName\",\n              value: unit.blockName,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              gridColumn: \"span 2\"\n            },\n            children: [\"Total Gross Area of Building (for this block):\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              name: \"totalBuildingGrossArea\",\n              value: unit.totalBuildingGrossArea,\n              onChange: e => handleUnitChange(index, e),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), units.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => removeUnit(index),\n          style: {\n            backgroundColor: \"#dc3545\",\n            marginTop: \"15px\"\n          },\n          children: \"Remove Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          gap: \"15px\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addUnit,\n          disabled: loading,\n          children: \"Add Another Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading,\n          children: \"Submit All Units\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(DeveloperSubmissionForm, \"ADaNd8iIuR3FM0c97ZlbG1Z62TE=\");\n_c = DeveloperSubmissionForm;\nexport default DeveloperSubmissionForm;\nvar _c;\n$RefreshReg$(_c, \"DeveloperSubmissionForm\");","map":{"version":3,"names":["React","useState","XLSX","submitUnits","jsxDEV","_jsxDEV","unitTypologies","DeveloperSubmissionForm","_s","units","setUnits","unitId","typology","netArea","grossArea","floorNumber","blockName","totalBuildingGrossArea","message","setMessage","error","setError","loading","setLoading","handleExcelUpload","event","file","target","files","reader","FileReader","onload","evt","data","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","defval","parsedUnits","map","row","length","readAsBinaryString","handleUnitChange","index","name","value","newUnits","existingBlockUnits","filter","u","i","addUnit","lastUnit","newUnit","removeUnit","_","handleSubmit","preventDefault","unit","key","unitsToSend","parseFloat","parseInt","allocated","response","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","accept","onChange","disabled","display","marginTop","onSubmit","border","padding","borderRadius","backgroundColor","color","gridTemplateColumns","gap","e","required","step","gridColumn","onClick","justifyContent","_c","$RefreshReg$"],"sources":["/home/minale/trial/aahdc-lottery-platform-v1/frontend/src/components/DeveloperSubmissionForm.js"],"sourcesContent":["// frontend/src/components/DeveloperSubmissionForm.js\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { submitUnits } from \"../services/unitService\";\n\nconst unitTypologies = [\"Studio\", \"1BR\", \"2BR\", \"3BR\", \"Shop\"];\n\nfunction DeveloperSubmissionForm() {\n  const [units, setUnits] = useState([\n    {\n      unitId: \"\",\n      typology: \"\",\n      netArea: \"\",\n      grossArea: \"\",\n      floorNumber: \"\",\n      blockName: \"\",\n      totalBuildingGrossArea: \"\",\n    },\n  ]);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleExcelUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const data = evt.target.result;\n      const workbook = XLSX.read(data, { type: \"binary\" });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\n\n      const parsedUnits = jsonData.map((row) => ({\n        unitId: row[\"Unit ID\"] || \"\",\n        typology: row[\"Typology\"] || \"\",\n        netArea: row[\"Net Area\"] || \"\",\n        grossArea: row[\"Gross Area\"] || \"\",\n        floorNumber: row[\"Floor Number\"] || \"\",\n        blockName: row[\"Block Name\"] || \"\",\n        totalBuildingGrossArea: row[\"Total Building Gross Area\"] || \"\",\n      }));\n\n      setUnits(parsedUnits);\n      setMessage(`Loaded ${parsedUnits.length} units from Excel file.`);\n      setError(\"\");\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  const handleUnitChange = (index, event) => {\n    const { name, value } = event.target;\n    const newUnits = [...units];\n    newUnits[index][name] = value;\n\n    // Auto-fill totalBuildingGrossArea if it's the first unit in a new block\n    if (\n      name === \"blockName\" &&\n      value &&\n      !newUnits[index].totalBuildingGrossArea\n    ) {\n      const existingBlockUnits = newUnits.filter(\n        (u, i) => i !== index && u.blockName === value\n      );\n      if (existingBlockUnits.length > 0) {\n        newUnits[index].totalBuildingGrossArea =\n          existingBlockUnits[0].totalBuildingGrossArea;\n      }\n    }\n    setUnits(newUnits);\n  };\n\n  const addUnit = () => {\n    const lastUnit = units[units.length - 1];\n    const newUnit = {\n      unitId: \"\",\n      typology: \"\",\n      netArea: \"\",\n      grossArea: \"\",\n      floorNumber: \"\",\n      blockName: lastUnit ? lastUnit.blockName : \"\",\n      totalBuildingGrossArea: lastUnit ? lastUnit.totalBuildingGrossArea : \"\",\n    };\n    setUnits([...units, newUnit]);\n  };\n\n  const removeUnit = (index) => {\n    const newUnits = units.filter((_, i) => i !== index);\n    setUnits(newUnits);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setMessage(\"\");\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      // Basic client-side validation for empty fields\n      for (const unit of units) {\n        for (const key in unit) {\n          if (!unit[key]) {\n            setError(\n              `Please fill all fields for Unit ID: ${\n                unit.unitId || \"New Unit\"\n              }.`\n            );\n            setLoading(false);\n            return;\n          }\n        }\n      }\n\n      // Convert area and floor numbers to numbers, and ensure allocated: false\n      const unitsToSend = units.map((unit) => ({\n        ...unit,\n        netArea: parseFloat(unit.netArea),\n        grossArea: parseFloat(unit.grossArea),\n        floorNumber: parseInt(unit.floorNumber, 10),\n        totalBuildingGrossArea: parseFloat(unit.totalBuildingGrossArea),\n        allocated: false,\n      }));\n\n      const response = await submitUnits(unitsToSend);\n      setMessage(response.message);\n      setError(\"\");\n      setUnits([\n        {\n          unitId: \"\",\n          typology: \"\",\n          netArea: \"\",\n          grossArea: \"\",\n          floorNumber: \"\",\n          blockName: \"\",\n          totalBuildingGrossArea: \"\",\n        },\n      ]); // Clear form\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container-card\">\n      <h2>Developer Unit Submission</h2>\n      {message && <p className=\"message-success\">{message}</p>}\n      {error && <p className=\"message-error\">{error}</p>}\n      {loading && <p>Submitting units...</p>}\n\n      <div style={{ marginBottom: \"20px\" }}>\n        <label>\n          Upload Excel File (Batch Upload):\n          <input\n            type=\"file\"\n            accept=\".xlsx, .xls\"\n            onChange={handleExcelUpload}\n            disabled={loading}\n            style={{ display: \"block\", marginTop: \"8px\" }}\n          />\n        </label>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        {units.map((unit, index) => (\n          <div\n            key={index}\n            style={{\n              border: \"1px solid #e0e0e0\",\n              padding: \"20px\",\n              marginBottom: \"20px\",\n              borderRadius: \"10px\",\n              backgroundColor: \"#fdfdfd\",\n            }}\n          >\n            <h3\n              style={{ marginTop: 0, marginBottom: \"15px\", color: \"#34495e\" }}\n            >\n              Unit {index + 1}\n            </h3>\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n                gap: \"15px\",\n              }}\n            >\n              <label>\n                Unit ID:\n                <input\n                  type=\"text\"\n                  name=\"unitId\"\n                  value={unit.unitId}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n              <label>\n                Typology:\n                <select\n                  name=\"typology\"\n                  value={unit.typology}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                >\n                  <option value=\"\">Select Typology</option>\n                  {unitTypologies.map((type) => (\n                    <option key={type} value={type}>\n                      {type}\n                    </option>\n                  ))}\n                </select>\n              </label>\n              <label>\n                Net Area (sqm):\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  name=\"netArea\"\n                  value={unit.netArea}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n              <label>\n                Gross Area (sqm):\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  name=\"grossArea\"\n                  value={unit.grossArea}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n              <label>\n                Floor Number:\n                <input\n                  type=\"number\"\n                  name=\"floorNumber\"\n                  value={unit.floorNumber}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n              <label>\n                Block/Building Name:\n                <input\n                  type=\"text\"\n                  name=\"blockName\"\n                  value={unit.blockName}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n              <label style={{ gridColumn: \"span 2\" }}>\n                Total Gross Area of Building (for this block):\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  name=\"totalBuildingGrossArea\"\n                  value={unit.totalBuildingGrossArea}\n                  onChange={(e) => handleUnitChange(index, e)}\n                  required\n                />\n              </label>\n            </div>\n            {units.length > 1 && (\n              <button\n                type=\"button\"\n                onClick={() => removeUnit(index)}\n                style={{ backgroundColor: \"#dc3545\", marginTop: \"15px\" }}\n              >\n                Remove Unit\n              </button>\n            )}\n          </div>\n        ))}\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: \"15px\",\n            marginTop: \"20px\",\n          }}\n        >\n          <button type=\"button\" onClick={addUnit} disabled={loading}>\n            Add Another Unit\n          </button>\n          <button type=\"submit\" disabled={loading}>\n            Submit All Units\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default DeveloperSubmissionForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}